{"ast":null,"code":"var _jsxFileName = \"/Users/quincyhicks/Desktop/plant-app/plant-app/plant-app-client/src/components/MainContainer.jsx\";\nimport React, { Component } from 'react';\nimport PlantList from \"./PlantList/PlantList\";\nimport PlantNav from \"./nav\";\n\nclass MainContainer extends Component {\n  constructor() {\n    super();\n\n    this.deletePlant = async id => {\n      console.log(id);\n\n      try {\n        const deletePlant = await fetch(\"http://localhost:9000/plants/\".concat(id), {\n          method: \"DELETE\" // credentials: \"include\",\n\n        });\n        const parsedResponse = await deletePlant.json();\n\n        if (parsedResponse.status.code === 200) {\n          this.setState({\n            plants: this.state.plants.filter(plant => plant._id !== id)\n          });\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.updatePlant = async (id, formData) => {\n      const updatePlant = await fetch(\"http://localhost:9000/plants/\".concat(id), {\n        method: \"PUT\",\n        body: JSON.stringify(formData),\n        // credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const parsedResponse = await updatePlant.json();\n\n      if (parsedResponse.status.code === 201) {\n        this.setState({\n          plants: this.state.plants.map(function (plant) {\n            if (plant._id === id) {\n              return parsedResponse.data;\n            } else {\n              return plant;\n            }\n          })\n        });\n      }\n\n      console.log(parsedResponse);\n    };\n\n    this.createPlant = async formData => {\n      console.log(formData);\n\n      try {\n        const newPlant = await fetch(\"http://localhost:9000/plants\", {\n          method: \"POST\",\n          body: JSON.stringify(formData),\n          // credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        const parsedResponse = await newPlant.json();\n\n        if (parsedResponse.status.code === 201) {\n          this.setState({\n            plants: [...this.state.plants, parsedResponse.data]\n          });\n        }\n\n        console.log(\"********************\");\n        console.log(this.state);\n      } catch (err) {}\n    };\n\n    this.getMovies = async () => {\n      try {\n        console.log(\"Getting the movies*****************\");\n        const plants = await fetch(\"http://localhost:9000/plants\");\n        const parsedResponse = await plants.json();\n\n        if (parsedResponse.status.code === 200) {\n          this.setState({\n            plants: parsedResponse.data\n          });\n          console.log(parsedResponse.data);\n          console.log(\"We got the movies\");\n          console.log(this.state);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.state = {\n      plants: []\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"component is mounting\");\n    this.getMovies();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(PlantNav, {\n      createPlant: this.createPlant,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Here is the Movie Container\"), React.createElement(PlantList, {\n      deletePlant: this.deletePlant,\n      plants: this.state.plants,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MainContainer;","map":{"version":3,"sources":["/Users/quincyhicks/Desktop/plant-app/plant-app/plant-app-client/src/components/MainContainer.jsx"],"names":["React","Component","PlantList","PlantNav","MainContainer","constructor","deletePlant","id","console","log","fetch","method","parsedResponse","json","status","code","setState","plants","state","filter","plant","_id","err","updatePlant","formData","body","JSON","stringify","headers","map","data","createPlant","newPlant","getMovies","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component} from 'react'\nimport PlantList from \"./PlantList/PlantList\"\nimport PlantNav from \"./nav\"\n\n\n\n\nclass MainContainer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            plants: []\n        }\n    }\n\n    componentDidMount() {\n        console.log(\"component is mounting\")\n        this.getMovies();\n    }\n    deletePlant = async (id) => {\n        console.log(id)\n        try{\n            const deletePlant = await fetch(`http://localhost:9000/plants/${id}`, {\n                method: \"DELETE\",\n                // credentials: \"include\",\n            })\n            const parsedResponse = await deletePlant.json();\n            if(parsedResponse.status.code === 200) {\n                this.setState({\n                    plants: this.state.plants.filter(plant => plant._id !== id)\n                    \n                })\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n    updatePlant = async (id, formData) => {\n        const updatePlant = await fetch(`http://localhost:9000/plants/${id}`, {\n            method: \"PUT\",\n            body: JSON.stringify(formData),\n            // credentials: \"include\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        const parsedResponse = await updatePlant.json();\n        if(parsedResponse.status.code === 201){\n            this.setState({\n                plants: this.state.plants.map(function(plant){\n                    if(plant._id === id){\n                        return parsedResponse.data\n                    }else{\n                        return plant\n                    }\n                })\n            })\n        }\n        console.log(parsedResponse)\n    }\n    createPlant = async (formData) => {\n        console.log(formData)\n        try{\n            const newPlant = await fetch(\"http://localhost:9000/plants\", {\n                method: \"POST\",\n                body: JSON.stringify(formData),\n                // credentials: \"include\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \n                }\n            })\n            const parsedResponse = await newPlant.json();\n            if(parsedResponse.status.code === 201){\n                this.setState({\n                    plants: [...this.state.plants, parsedResponse.data]\n                })\n            }\n            console.log(\"********************\")\n            console.log(this.state)\n        }catch(err) {\n\n        }\n    }\n\n    getMovies = async () => {\n        try{\n            console.log(\"Getting the movies*****************\")\n        const plants = await fetch(\"http://localhost:9000/plants\")\n        const parsedResponse = await plants.json();\n        if(parsedResponse.status.code === 200){\n            this.setState({\n                plants: parsedResponse.data})\n                console.log(parsedResponse.data)\n                console.log(\"We got the movies\")\n                console.log(this.state)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n    render() {\n        return(\n            <div>\n                <PlantNav createPlant= {this.createPlant} />\n                <h3>Here is the Movie Container</h3>\n                <PlantList deletePlant={this.deletePlant} plants={this.state.plants} />\n            </div>\n        )\n    }\n}\n\nexport default MainContainer;"]},"metadata":{},"sourceType":"module"}