{"ast":null,"code":"var _jsxFileName = \"/Users/quincyhicks/Desktop/plant-app/plant-app/plant-app-client/src/components/MainContainer.jsx\";\nimport React, { Component } from 'react';\nimport PlantList from \"./PlantList/PlantList\";\nimport PlantNav from \"./nav\";\n\nclass MainContainer extends Component {\n  constructor() {\n    super();\n\n    this.createPlant = async formData => {\n      console.log(formData);\n\n      try {\n        const newPlant = await fetch(\"http://localhost:9000/plants\", {\n          method: \"POST\",\n          body: JSON.stringify(formData),\n          // credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        const parsedResponse = await newPlant.json();\n\n        if (parsedResponse.status.code === 201) {\n          this.setState({\n            plants: [...this.state.plants, parsedResponse.data]\n          });\n        }\n\n        console.log(\"********************\");\n        console.log(this.state);\n      } catch (err) {}\n    };\n\n    this.getMovies = async () => {\n      try {\n        console.log(\"Getting the movies*****************\");\n        const plants = await fetch(\"http://localhost:9000/plants\");\n        const parsedResponse = await plants.json();\n\n        if (parsedResponse.status.code === 200) {\n          this.setState({\n            plants: parsedResponse.data\n          });\n          console.log(parsedResponse.data);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.state = {\n      plants: []\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"component is mounting\");\n    this.getMovies();\n  } // deleteMovie = async (id) => {\n  //     console.log(id)\n  //     try{\n  //         const deleteMovie = await fetch(`http://localhost:9000/api/v1/movies/${id}`, {\n  //             method: \"DELETE\",\n  //             credentials: \"include\",\n  //         })\n  //         const parsedResponse = await deleteMovie.json();\n  //         if(parsedResponse.status.code === 200) {\n  //             this.setState({\n  //                 movies: this.state.movies.filter(movie => movie._id !== id)\n  //             })\n  //         }\n  //     }catch(err){\n  //         console.log(err)\n  //     }\n  // }\n  // updateMovie = async (id, formData) => {\n  //     const updatedMovie = await fetch(`http://localhost:9000/api/v1/movies/${id}`, {\n  //         method: \"PUT\",\n  //         body: JSON.stringify(formData),\n  //         credentials: \"include\",\n  //         headers: {\n  //             \"Content-Type\": \"application/json\"\n  //         }\n  //     })\n  //     const parsedResponse = await updatedMovie.json();\n  //     if(parsedResponse.status.code === 201){\n  //         this.setState({\n  //             movies: this.state.movies.map(function(movie){\n  //                 if(movie._id === id){\n  //                     return parsedResponse.data\n  //                 }else{\n  //                     return movie\n  //                 }\n  //             })\n  //         })\n  //     }\n  //     console.log(parsedResponse)\n  // }\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(PlantNav, {\n      createPlant: this.createPlant,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Here is the Movie Container\"), React.createElement(PlantList, {\n      plants: this.state.plants,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MainContainer;","map":{"version":3,"sources":["/Users/quincyhicks/Desktop/plant-app/plant-app/plant-app-client/src/components/MainContainer.jsx"],"names":["React","Component","PlantList","PlantNav","MainContainer","constructor","createPlant","formData","console","log","newPlant","fetch","method","body","JSON","stringify","headers","parsedResponse","json","status","code","setState","plants","state","data","err","getMovies","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,QAAP,MAAqB,OAArB;;AAKA,MAAMC,aAAN,SAA4BH,SAA5B,CAAsC;AAClCI,EAAAA,WAAW,GAAG;AACV;;AADU,SAoDdC,WApDc,GAoDA,MAAOC,QAAP,IAAoB;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,UAAG;AACC,cAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAAD,EAAiC;AACzDC,UAAAA,MAAM,EAAE,MADiD;AAEzDC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,QAAf,CAFmD;AAGzD;AACAS,UAAAA,OAAO,EAAE;AACL,4BAAgB;AADX;AAJgD,SAAjC,CAA5B;AASA,cAAMC,cAAc,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAA7B;;AACA,YAAGD,cAAc,CAACE,MAAf,CAAsBC,IAAtB,KAA+B,GAAlC,EAAsC;AAClC,eAAKC,QAAL,CAAc;AACVC,YAAAA,MAAM,EAAE,CAAC,GAAG,KAAKC,KAAL,CAAWD,MAAf,EAAuBL,cAAc,CAACO,IAAtC;AADE,WAAd;AAGH;;AACDhB,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKc,KAAjB;AACH,OAlBD,CAkBC,OAAME,GAAN,EAAW,CAEX;AACJ,KA3Ea;;AAAA,SA6EdC,SA7Ec,GA6EF,YAAY;AACpB,UAAG;AACClB,QAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACJ,cAAMa,MAAM,GAAG,MAAMX,KAAK,CAAC,8BAAD,CAA1B;AACA,cAAMM,cAAc,GAAG,MAAMK,MAAM,CAACJ,IAAP,EAA7B;;AACA,YAAGD,cAAc,CAACE,MAAf,CAAsBC,IAAtB,KAA+B,GAAlC,EAAsC;AAClC,eAAKC,QAAL,CAAc;AACVC,YAAAA,MAAM,EAAEL,cAAc,CAACO;AADb,WAAd;AAEIhB,UAAAA,OAAO,CAACC,GAAR,CAAYQ,cAAc,CAACO,IAA3B;AACH;AACJ,OATD,CASC,OAAMC,GAAN,EAAU;AACPjB,QAAAA,OAAO,CAACC,GAAR,CAAYgB,GAAZ;AACH;AACJ,KA1Fa;;AAEV,SAAKF,KAAL,GAAa;AACTD,MAAAA,MAAM,EAAE;AADC,KAAb;AAGH;;AAEDK,EAAAA,iBAAiB,GAAG;AAChBnB,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,SAAKiB,SAAL;AACH,GAXiC,CAYlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAwCAE,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AAAU,MAAA,WAAW,EAAG,KAAKtB,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAFJ,EAGI,oBAAC,SAAD;AAAW,MAAA,MAAM,EAAE,KAAKiB,KAAL,CAAWD,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADJ;AAOH;;AApGiC;;AAuGtC,eAAelB,aAAf","sourcesContent":["import React, { Component} from 'react'\nimport PlantList from \"./PlantList/PlantList\"\nimport PlantNav from \"./nav\"\n\n\n\n\nclass MainContainer extends Component {\n    constructor() {\n        super();\n        this.state = {\n            plants: []\n        }\n    }\n\n    componentDidMount() {\n        console.log(\"component is mounting\")\n        this.getMovies();\n    }\n    // deleteMovie = async (id) => {\n    //     console.log(id)\n    //     try{\n    //         const deleteMovie = await fetch(`http://localhost:9000/api/v1/movies/${id}`, {\n    //             method: \"DELETE\",\n    //             credentials: \"include\",\n    //         })\n    //         const parsedResponse = await deleteMovie.json();\n    //         if(parsedResponse.status.code === 200) {\n    //             this.setState({\n    //                 movies: this.state.movies.filter(movie => movie._id !== id)\n                    \n    //             })\n    //         }\n    //     }catch(err){\n    //         console.log(err)\n    //     }\n    // }\n    // updateMovie = async (id, formData) => {\n    //     const updatedMovie = await fetch(`http://localhost:9000/api/v1/movies/${id}`, {\n    //         method: \"PUT\",\n    //         body: JSON.stringify(formData),\n    //         credentials: \"include\",\n    //         headers: {\n    //             \"Content-Type\": \"application/json\"\n    //         }\n    //     })\n    //     const parsedResponse = await updatedMovie.json();\n    //     if(parsedResponse.status.code === 201){\n    //         this.setState({\n    //             movies: this.state.movies.map(function(movie){\n    //                 if(movie._id === id){\n    //                     return parsedResponse.data\n    //                 }else{\n    //                     return movie\n    //                 }\n    //             })\n    //         })\n    //     }\n    //     console.log(parsedResponse)\n    // }\n    createPlant = async (formData) => {\n        console.log(formData)\n        try{\n            const newPlant = await fetch(\"http://localhost:9000/plants\", {\n                method: \"POST\",\n                body: JSON.stringify(formData),\n                // credentials: \"include\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \n                }\n            })\n            const parsedResponse = await newPlant.json();\n            if(parsedResponse.status.code === 201){\n                this.setState({\n                    plants: [...this.state.plants, parsedResponse.data]\n                })\n            }\n            console.log(\"********************\")\n            console.log(this.state)\n        }catch(err) {\n\n        }\n    }\n\n    getMovies = async () => {\n        try{\n            console.log(\"Getting the movies*****************\")\n        const plants = await fetch(\"http://localhost:9000/plants\")\n        const parsedResponse = await plants.json();\n        if(parsedResponse.status.code === 200){\n            this.setState({\n                plants: parsedResponse.data})\n                console.log(parsedResponse.data)\n            }\n        }catch(err){\n            console.log(err)\n        }\n    }\n    render() {\n        return(\n            <div>\n                <PlantNav createPlant= {this.createPlant} />\n                <h3>Here is the Movie Container</h3>\n                <PlantList plants={this.state.plants} />\n            </div>\n        )\n    }\n}\n\nexport default MainContainer;"]},"metadata":{},"sourceType":"module"}